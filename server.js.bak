require('dotenv').config();
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');
const passport = require('passport');
const SteamStrategy = require('passport-steam').Strategy;
const session = require('express-session');
const mysql = require('mysql2/promise');
const { KubeConfig, BatchV1Api } = require('@kubernetes/client-node');
const fs = require('fs');
const yaml = require('js-yaml');
const crypto = require('crypto');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

const dbConfig = {
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: 'stats' // Use your `stats` database where `ultimate_stats` exists
};

app.use(express.static(path.join(__dirname, 'public')));
app.use(session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false
}));

passport.use(new SteamStrategy({
    returnURL: 'http://192.168.50.238:3000/auth/steam/callback',
    realm: 'http://192.168.50.238:3000/',
    apiKey: process.env.STEAM_API_KEY
}, (identifier, profile, done) => {
    profile.steamId = profile.id; // Ensure steamId is correctly set
    profile.username = profile.displayName || 'Unknown user';
    return done(null, profile);
}));

passport.serializeUser((user, done) => {
    done(null, user);
});

passport.deserializeUser((user, done) => {
    done(null, user);
});

app.use(passport.initialize());
app.use(passport.session());

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/auth/steam', passport.authenticate('steam'));

app.get('/auth/steam/callback',
    passport.authenticate('steam', { failureRedirect: '/' }),
    (req, res) => {
        res.redirect('/profile.html');
    }
);

app.get('/user/info', (req, res) => {
    if (req.isAuthenticated() || req.session.passport) {
        const user = req.user || req.session.passport.user;
        res.json({
            username: user.username,
            steamId: user.steamId // Ensure the Steam ID is sent to the frontend
        });
    } else {
        res.status(401).send('User not authenticated');
    }
});

// Route to fetch player's skill (ELO) from MySQL
app.get('/user/skill', async (req, res) => {
    if (req.isAuthenticated() || req.session.passport) {
        const user = req.user || req.session.passport.user;
        const playerName = user.username;

        const db = await mysql.createConnection(dbConfig);
        try {
            const [rows] = await db.query('SELECT skill FROM ultimate_stats WHERE name = ?', [playerName]);

            if (rows.length > 0) {
                res.json({ skill: rows[0].skill });
            } else {
                res.status(404).json({ message: 'Player skill not found' });
            }
        } catch (error) {
            console.error('Error fetching player skill:', error);
            res.status(500).json({ error: 'Database error' });
        } finally {
            await db.end();
        }
    } else {
        res.status(401).send('User not authenticated');
    }
});

server.listen(3000, () => {
    console.log('Server running on port 3000');
});
